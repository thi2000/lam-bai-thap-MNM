{"version":3,"sources":["after.js","before.js","contactform.js","template.js"],"names":["jQuery","Elementor_ContactForm","_this","this","_classCallCheck","elementor","hooks","addAction","panel","onPanelShow","_createClass","key","value","instance","templateIdControl","content","currentView","collection","findWhere","name","get","templateIdInput","children","findByModelCid","cid","$controlOptions","$el","find","$select","$optionsSelect","eq","currentValue","model","sort","a","b","c","text","toLowerCase","d","empty","append","val","on","onTemplateIdChange","trigger","formID","options","elementSettingsModel","attributes","template_id","type","types","$editButton","editUrl","ElementorConfig","home_url","length","prop","target","class","href","html","after","remove","getInstance","Elementor_Template","_this2","templateID"],"mappings":"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","file":"admin-editor.js","sourcesContent":["})(jQuery);","(function ($) {","class Elementor_ContactForm{\r\n    static instance;\r\n\r\n    static getInstance() {\r\n        if (!Elementor_ContactForm.instance) {\r\n            Elementor_ContactForm.instance = new Elementor_ContactForm();\r\n        }\r\n        return Elementor_ContactForm.instance;\r\n    }\r\n\r\n    constructor(){\r\n        elementor.hooks.addAction( 'panel/open_editor/widget/opal-template', (panel) => {\r\n            this.onPanelShow(panel);\r\n        } );\r\n    }\r\n\r\n    onPanelShow(panel){\r\n        let templateIdControl = panel.content.currentView.collection.findWhere( { name: 'cf_id' } );\r\n\r\n        if ( ! templateIdControl || 'cf_id' !== templateIdControl.get( 'name' ) ) {\r\n            return; // No templates\r\n        }\r\n\r\n        let templateIdInput = panel.content.currentView.children.findByModelCid( templateIdControl.cid );\r\n\r\n        // Order templates by name.\r\n        let $controlOptions = templateIdInput.$el.find( 'option' ),\r\n            $select = templateIdInput.$el.find( 'select' ),\r\n            // Keep the first option ( - select -) without order.\r\n            $optionsSelect = $controlOptions.eq( 0 ),\r\n            currentValue = panel.content.currentView.model.get( 'settings' ).get( 'cf_id' );\r\n\r\n        delete $controlOptions[0];\r\n\r\n        $controlOptions.sort( function( a, b ) {\r\n            let c = a.text.toLowerCase(),\r\n                d = b.text.toLowerCase();\r\n            if ( c > d ) {\r\n                return 1;\r\n            } else if ( c < d ) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        } );\r\n\r\n        $select.empty().append( $optionsSelect ).append( $controlOptions );\r\n\r\n        // Reset value, because the 'selected option' is changed while play with the options.\r\n        $select.val( currentValue );\r\n\r\n        // Change Edit link on change template.\r\n        templateIdInput.on( 'input:change', this.onTemplateIdChange ).trigger( 'input:change' );\r\n\r\n    }\r\n\r\n\r\n    onTemplateIdChange(){\r\n        let formID = this.options.elementSettingsModel.attributes.template_id,\r\n            type = this.options.model.attributes.types[ formID ],\r\n            $editButton = this.$el.find( '.elementor-edit-' );\r\n\r\n        if ( '0' === formID || ! formID || 'widget' === type ) { // '0' = first option, 'widget' is editable only from Elementor page\r\n            if ( $editButton.length ) {\r\n                $editButton.remove();\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        let editUrl = ElementorConfig.home_url + '?page=wpcf7&post=' + formID;\r\n\r\n        if ( $editButton.length ) {\r\n            $editButton.prop( 'href', editUrl );\r\n        } else {\r\n            $editButton = jQuery( '<a />', {\r\n                target: '_blank',\r\n                'class': 'elementor-button elementor-button-default elementor-edit-form',\r\n                href: editUrl,\r\n                html: '<i class=\"fa fa-pencil\" /> Edit Form'\r\n            } );\r\n\r\n            this.$el.find( '.elementor-control-input-wrapper' ).after( $editButton );\r\n        }\r\n    }\r\n}\r\n\r\nElementor_ContactForm.getInstance();","class Elementor_Template{\r\n    static instance;\r\n\r\n    static getInstance() {\r\n        if (!Elementor_Template.instance) {\r\n            Elementor_Template.instance = new Elementor_Template();\r\n        }\r\n        return Elementor_Template.instance;\r\n    }\r\n\r\n    constructor(){\r\n        elementor.hooks.addAction( 'panel/open_editor/widget/opal-template', (panel) => {\r\n            this.onPanelShow(panel);\r\n        } );\r\n    }\r\n\r\n    onPanelShow(panel){\r\n        let templateIdControl = panel.content.currentView.collection.findWhere( { name: 'template_id' } );\r\n\r\n        if ( ! templateIdControl || 'template_id' !== templateIdControl.get( 'name' ) ) {\r\n            return; // No templates\r\n        }\r\n\r\n        let templateIdInput = panel.content.currentView.children.findByModelCid( templateIdControl.cid );\r\n\r\n        // Order templates by name.\r\n        let $controlOptions = templateIdInput.$el.find( 'option' ),\r\n            $select = templateIdInput.$el.find( 'select' ),\r\n            // Keep the first option ( - select -) without order.\r\n            $optionsSelect = $controlOptions.eq( 0 ),\r\n            currentValue = panel.content.currentView.model.get( 'settings' ).get( 'template_id' );\r\n\r\n        delete $controlOptions[0];\r\n\r\n        $controlOptions.sort( function( a, b ) {\r\n            let c = a.text.toLowerCase(),\r\n                d = b.text.toLowerCase();\r\n            if ( c > d ) {\r\n                return 1;\r\n            } else if ( c < d ) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        } );\r\n\r\n        $select.empty().append( $optionsSelect ).append( $controlOptions );\r\n\r\n        // Reset value, because the 'selected option' is changed while play with the options.\r\n        $select.val( currentValue );\r\n\r\n        // Change Edit link on change template.\r\n        templateIdInput.on( 'input:change', this.onTemplateIdChange ).trigger( 'input:change' );\r\n\r\n    }\r\n\r\n\r\n    onTemplateIdChange(){\r\n        let templateID = this.options.elementSettingsModel.attributes.template_id,\r\n            type = this.options.model.attributes.types[ templateID ],\r\n            $editButton = this.$el.find( '.elementor-edit-template' );\r\n\r\n        if ( '0' === templateID || ! templateID || 'widget' === type ) { // '0' = first option, 'widget' is editable only from Elementor page\r\n            if ( $editButton.length ) {\r\n                $editButton.remove();\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        let editUrl = ElementorConfig.home_url + '?p=' + templateID + '&elementor';\r\n\r\n        if ( $editButton.length ) {\r\n            $editButton.prop( 'href', editUrl );\r\n        } else {\r\n            $editButton = jQuery( '<a />', {\r\n                target: '_blank',\r\n                'class': 'elementor-button elementor-button-default elementor-edit-template',\r\n                href: editUrl,\r\n                html: '<i class=\"fa fa-pencil\" /> Edit Template'\r\n            } );\r\n\r\n            this.$el.find( '.elementor-control-input-wrapper' ).after( $editButton );\r\n        }\r\n    }\r\n}\r\n\r\nElementor_Template.getInstance();"]}